#Pre-requisites brushup

Access modifiers
#Defines the access type of the method i.e. from where it can be accessed in your application. 
    In Java, there are 4 types of access specifiers: 
        public: Accessible in all classes in your application.
        protected: Accessible within the package in which it is defined and in its subclass(es) 
                   (including subclasses declared outside the package).
        private: Accessible only within the class in which it is defined.
        default (declared/defined without using any modifier): 
            Accessible within the same class and package within which its class is defined.


4 pillars of OOPs:
    1. Data Abstraction is the property by virtue of which only the essential details are displayed to the user. 
    Data Abstraction may also be defined as the process of identifying only the required characteristics of an object, 
    ignoring the irrelevant details.
    In Java, abstraction is achieved by interfaces and abstract classes. We can achieve 100% abstraction using interfaces.

    2. Encapsulation: It is defined as the wrapping up of data under a single unit. 
    It is the mechanism that binds together the code and the data it manipulates. Another way to think about encapsulation is that 
    it is a protective shield that prevents the data from being accessed by the code outside this shield.
    In encapsulation, the data in a class is hidden from other classes, which is similar to what data-hiding does.
    So, the terms “encapsulation” and “data-hiding” are used interchangeably.
    Encapsulation can be achieved by declaring all the variables in a class as private and writing public
    methods in the class to set and get the values of the variables.

    3. Inheritance:Inheritance is an important pillar of OOP (Object Oriented Programming). 
    It is the mechanism in Java by which one class is allowed to inherit the features (fields and methods) of another class. 
    We are achieving inheritance by using extends keyword. Inheritance is also known as “is-a” relationship.
        Superclass: The class whose features are inherited is known as superclass (also known as base or parent class).
        Subclass: The class that inherits the other class is known as subclass (also known as derived or extended or child class). 
        The subclass can add its own fields and methods in addition to the superclass fields and methods.
        Reusability: Inheritance supports the concept of “reusability”, i.e. when we want to create a new class and 
        there is already a class that includes some of the code that we want, we can derive our new class from the existing class. 
        By doing this, we are reusing the fields and methods of the existing class.

    4: Polymorphism
        It refers to the ability of object-oriented programming languages to differentiate between entities with the same name efficiently.
        This is done by Java with the help of the signature and declaration of these entities.
        The ability to appear in many forms is called polymorphism.
        Polymorphism in Java is mainly of 2 types: 
            Overloading
            Overriding



#Java classes

A class is a user-defined blueprint or prototype from which objects are created.
It represents the set of properties or methods that are common to all objects of one type.

Modifiers: A class can be public or have default access (Refer to this for details).
Class name: The class name should begin with the initial letter capitalized by convention.
Superclass (if any): The name of the class’s parent (superclass), if any, preceded by the keyword extends.
         A class can only extend (subclass) one parent.
Interfaces (if any): A comma-separated list of interfaces implemented by the class, if any,
     preceded by the keyword implements. A class can implement more than one interface.
Body: The class body is surrounded by braces, { }.


class declaration in java

access_modifier class <class_name>
{  
    data member;  
    method;  
    constructor;
    nested class;
    interface;
}

#creating object of class

Test t =new Test();

// creating object of public class Test
// consider class Test present in com.p1 package
Test obj = (Test)Class.forName("com.p1.Test").newInstance();


What is Object?
    An object is a basic unit of Object-Oriented Programming that represents real-life entities.
    A typical Java program creates many objects, which as you know, interact by invoking methods.

    An object mainly consists of: 

    State: It is represented by the attributes of an object. It also reflects the properties of an object.
    Behavior: It is represented by the methods of an object. 
        It also reflects the response of an object to other objects.
    Identity: It is a unique name given to an object that enables it to interact with other objects.
    Method: A method is a collection of statements that perform some specific task and return the result to the caller.



Abstract class
    abstract class GFG{
        //abstract methods declaration
        abstract void add();
        abstract void mul();
        abstract void div();
    }

    class Employee {
        private int empid;
        private String ename;
    }
Inheritance
    class A{
        //parent class methods
        void method1(){}
        void method2(){}
    }

    //derived class or child class or base class
    class B extends A{  //Inherits parent class methods
        //child class methods
        void method3(){}
        void method4(){}
    }

Polymorphism
    sleep(1000) //millis

    sleep(1000,2000) //millis,nanos

    public class Sum {

        // Overloaded sum().
        // This sum takes two int parameters
        public int sum(int x, int y)
        {
            return (x + y);
        }

        // Overloaded sum().
        // This sum takes three int parameters
        public int sum(int x, int y, int z)
        {
            return (x + y + z);
        }

        // Overloaded sum().
        // This sum takes two double parameters
        public double sum(double x, double y)
        {
            return (x + y);
        }

        // Driver code
        public static void main(String args[])
        {
            Sum s = new Sum();
            System.out.println(s.sum(10, 20));
            System.out.println(s.sum(10, 20, 30));
            System.out.println(s.sum(10.5, 20.5));
        }
    }





